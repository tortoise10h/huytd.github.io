#+TITLE: Integrate WebAssembly in any JavaScript project
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/hack.css" />
#+HTML_HEAD: <script async src="https://www.googletagmanager.com/gtag/js?id=UA-121604637-1"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'UA-121604637-1'); </script>
#+HTML_LINK_HOME: /

Read: https://developers.google.com/web/updates/2019/01/emscripten-npm#integration_with_npm

By using Docker and NPM, we can integrate WebAssembly into any JS project.

*First*, create a new entry in NPM scripts to run =build.sh=, a script to build your WASM module, like this:

#+BEGIN_SRC 
"build:emscripten": "docker run --rm -v $(pwd):/src trzeci/emscripten ./build.sh",
#+END_SRC

To avoid messing up with environment, we can use =docker= to hold the WASM build environment. The =-v $(pwd)= parameter is bind the current folder into =docker= container so we can actually build.

*Second*, write the build script, it will be something like:

#+BEGIN_SRC 
emcc <src> -o /dist
#+END_SRC

All of the JavaScript and Wasm files will be put into =dist= folder, and this is where you use it.

*Finally*, you can use it by importing, just like any other JS modules.

#+BEGIN_SRC 
<!doctype html>
<title>Emscripten + npm example</title>
Open the console to see the output from the wasm module.
<script type="module">
import wasmModule from "./my-module.js";

const instance = wasmModule({
  onRuntimeInitialized() {
     // Do something with instance
  }
});
</script>
#+END_SRC
